generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AccessibilityLevel {
  SEM_ACESSIBILIDADE      @map("Sem Acessibilidade")
  ACESSIBILIDADE_BASICA   @map("Acessibilidade Básica")
  ACESSIBILIDADE_AUDITIVA @map("Acessibilidade Auditiva")
  ACESSIBILIDADE_VISUAL   @map("Acessibilidade Visual")
  ACESSIBILIDADE_COMPLETA @map("Acessibilidade Completa")
  NAO_INFORMADA           @map("Acessibilidade não informada")
}

model User {
  userId      String   @id @default(uuid())
  firstName   String   @db.VarChar(50)
  lastName    String   @db.VarChar(50)
  email       String   @unique @db.VarChar(100)
  phoneNumber String?  @db.VarChar(15)
  password    String
  createdAt   DateTime @default(now())

  // Adicionando relacionamento com Role
  // 1 - Admim / 2 - User
  roleId Int  @default(2)
  role   Role @relation(fields: [roleId], references: [roleId])

  recoveryCodes RecoveryCode[]

  @@map("users")
}

model Event {
  eventId             String             @id @default(uuid())
  title               String             @db.VarChar(120)
  description         String?            @db.VarChar(600)
  linkEvent           String?            @db.VarChar(255)
  price               Decimal            @db.Decimal(8, 2)
  addressStreet       String             @db.VarChar(120)
  addressNumber       String             @db.VarChar(8)
  addressNeighborhood String             @db.VarChar(20)
  addressComplement   String?            @db.VarChar(30)
  accessibilityLevel  AccessibilityLevel @default(NAO_INFORMADA)
  startDateTime       DateTime
  endDateTime         DateTime?
  createdAt           DateTime           @default(now())

  eventOrganizerId String
  organizer        EventOrganizer @relation(fields: [eventOrganizerId], references: [organizerId])

  eventCategoryId String
  category        EventCategory @relation(fields: [eventCategoryId], references: [categoryId])

  @@map("events")
}

model Role {
  roleId          Int     @id @default(autoincrement())
  roleName        String  @unique @db.VarChar(20)
  roleDescription String? @db.VarChar(80)

  // Relacionamento com usuários
  users User[]

  @@map("roles")
}

model EventOrganizer {
  organizerId          String   @id @default(uuid())
  organizerName        String   @db.VarChar(100)
  organizerCnpj        String   @db.VarChar(18)
  organizerEmail       String   @unique @db.VarChar(100)
  organizerPhoneNumber String?  @db.VarChar(15)
  createdAt            DateTime @default(now())

  // Relacionamento com usuários
  events Event[]

  @@map("event_organizers")
}

model EventCategory {
  categoryId          String   @id @default(uuid())
  categoryName        String   @unique @db.VarChar(30)
  categoryDescription String?  @db.VarChar(300)
  createdAt           DateTime @default(now())

  // Relacionamento com usuários
  events Event[]

  @@map("event_categories")
}

model RecoveryCode {
  id        String   @id @default(cuid())
  userEmail String   @unique // E-mail do usuário associado ao código
  code      String // Código de recuperação gerado
  expiresAt DateTime // Data e hora de expiração do código
  createdAt DateTime @default(now()) // Data de criação do código
  updatedAt DateTime @updatedAt // Data de atualização (para manter o registro atualizado)

  user User @relation(fields: [userEmail], references: [email])

  @@map("recovery_codes")
}
